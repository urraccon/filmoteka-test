{"mappings":"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","sources":["src/js/my_library.js"],"sourcesContent":["import { renderMoviesList, renderPaginationButtons } from './render.js';\nimport {\n  WATCHED_KEY,\n  QUEUE_KEY,\n  saveMovieList,\n  loadMovieList,\n} from './storage.js';\nimport {\n  uploadWatchedQueuedMoviesToDB,\n  downloadWatchedQueuedMoviesFromDB,\n  itemAccess,\n} from './db.js';\n\nvar watchedList = [],\n  queueList = [],\n  // allMovies = [],\n  movArray = [],\n  // moviesWatched = [],\n  // moviesQueued = [],\n  watchedActive = true;\nvar m;\n\n// set the values ​​stored in the database in the lists of watched movies and put them in the queue\nasync function setStoredValues() {\n  downloadWatchedQueuedMoviesFromDB();\n  await new Promise(resolve => {\n    setTimeout(() => {\n      resolve(takeItem());\n    }, 1000);\n  });\n}\n\nfunction takeItem() {\n  try {\n    const itemData = itemAccess.data();\n    console.log(itemData);\n    const itemDataLength = Object.keys(itemData).length;\n    console.log(itemDataLength);\n    if (\n      itemDataLength === 0 ||\n      itemData.queuedMovies === undefined ||\n      itemData.watchedMovies === undefined\n    ) {\n      initializeLibrary();\n      return;\n    }\n    // const pickedMoviesTextified = itemData.movies;\n    // const pickedMovies = JSON.parse(pickedMoviesTextified);\n    // console.log(pickedMovies);\n    // debugger;\n    // const pickListLength = Object.keys(pickList).length;\n    const queuedMoviesLength = itemData.queuedMovies.length;\n    const watchedMoviesLength = itemData.watchedMovies.length;\n    const watchedMovies = itemData.watchedMovies;\n    const queuedMovies = itemData.queuedMovies;\n    console.log(queuedMoviesLength);\n    // if (pickListLength === 0) {\n    //   watchedList = [];\n    //   queueList = [];\n    // }\n    // debugger;\n    if (queuedMoviesLength !== 0) {\n      if (queuedMovies !== '[]') {\n        const queuedListText = itemData.queuedMovies[0];\n        queueList = JSON.parse(queuedListText);\n      }\n    }\n    if (watchedMoviesLength !== 0) {\n      if (watchedMovies !== '[]') {\n        const watchedListText = itemData.watchedMovies[0];\n        watchedList = JSON.parse(watchedListText);\n      }\n    }\n    // let moviesWatched = [];\n    // let moviesQueued = [];\n    // pickedMovies.forEach(movie => {\n    //   if (movie.watched === true) {\n    //     moviesWatched.push(movie);\n    //   }\n    //   if (movie.queued === true) {\n    //     moviesQueued.push(movie);\n    //   }\n    // });\n    // allMovies = pickedMovies;\n    // sortMovies(pickedMovies);\n\n    initializeLibrary();\n    console.log(\n      'You movies saved in watched are:',\n      watchedList,\n      'and queued are: ',\n      queueList\n    );\n  } catch (error) {\n    console.log(`I couldn't load the data from the database, because: `, error);\n  }\n}\n\nfunction initializeLibrary() {\n  // debugger;\n  // watchedList = loadMovieList(WATCHED_KEY);\n  // queueList = loadMovieList(QUEUE_KEY);\n  setActiveStyles(watchedBtn);\n  const clearBtn = document.querySelector('.clear-btn');\n  clearBtn.innerText = 'CLEAR WATCHED LIST';\n  if (watchedList.length > 0) {\n    renderMoviesList(watchedList);\n  } else {\n    const spanElem = document.querySelector('.error-message');\n    spanElem.innerText = 'Oops! Your \"watched\" library is empty!';\n  }\n  clearBtn.addEventListener('click', clearBtnClick);\n}\n\nfunction clearBtnClick() {\n  if (watchedActive) {\n    console.log('clear watched list');\n    watchedList = [];\n    // saveMovieList(WATCHED_KEY, watchedList);\n    uploadWatchedQueuedMoviesToDB('watched', watchedList);\n  } else {\n    console.log('clear queue list');\n    queueList = [];\n    // saveMovieList(QUEUE_KEY, queueList);\n    uploadWatchedQueuedMoviesToDB('queued', queueList);\n  }\n  const moviesDivElem = document.querySelector('.movies-div');\n  moviesDivElem.innerHTML = '';\n}\nfunction setActiveStyles(element) {\n  element.classList.add('active');\n}\n\nfunction removeActiveStyles(element) {\n  element.classList.remove('active');\n}\n\nfunction watchedBtnClick() {\n  setActiveStyles(watchedBtn);\n  removeActiveStyles(queueBtn);\n  watchedActive = true;\n  const clearBtn = document.querySelector('.clear-btn');\n  clearBtn.innerText = 'CLEAR WATCHED LIST';\n  const spanElem = document.querySelector('.error-message');\n  if (watchedList.length === 0) {\n    spanElem.innerText = 'Oops! Your \"watched\" library is empty!';\n    const moviesDivElem = document.querySelector('.movies-div');\n    moviesDivElem.innerHTML = '';\n    return;\n  } else {\n    spanElem.innerText = '';\n  }\n  renderMoviesList(watchedList);\n}\nfunction queueBtnClick() {\n  setActiveStyles(queueBtn);\n  removeActiveStyles(watchedBtn);\n  watchedActive = false;\n  const clearBtn = document.querySelector('.clear-btn');\n  clearBtn.innerText = 'CLEAR QUEUE LIST';\n  const spanElem = document.querySelector('.error-message');\n  if (queueList.length === 0) {\n    spanElem.innerText = 'Oops! Your \"queue\" library is empty!';\n    const moviesDivElem = document.querySelector('.movies-div');\n    moviesDivElem.innerHTML = '';\n    return;\n  } else {\n    spanElem.innerText = '';\n  }\n\n  renderMoviesList(queueList);\n}\ndocument.addEventListener('DOMContentLoaded', setStoredValues);\nconst watchedBtn = document.querySelector('.watched-btn');\nconst queueBtn = document.querySelector('.queue-btn');\n\nwatchedBtn.addEventListener('click', watchedBtnClick);\nqueueBtn.addEventListener('click', queueBtnClick);\n\n// modal section\nconst closeModalButton2 = document.getElementById('closeModalBtn2');\nconst backdrop2 = document.querySelector('.bckdrp');\ncloseModalButton2.addEventListener('click', function () {\n  backdrop2.style.display = 'none';\n});\n\ndocument.addEventListener('keydown', function (event) {\n  if (event.key === 'Escape') {\n    backdrop2.style.display = 'none';\n  }\n});\nbackdrop2.addEventListener('click', function (event) {\n  if (event.target === backdrop2) {\n    backdrop2.style.display = 'none';\n  }\n});\n\nconst watchedBtn2 = document.querySelector('.wbtn2');\nconst queueBtn2 = document.querySelector('.qbtn2');\nwatchedBtn2.addEventListener('click', watchedBtnClick2);\nqueueBtn2.addEventListener('click', queueBtnClick2);\n\n//sotingMovies\n// function sortMovies(movies) {\n//   movies.forEach(movie => {\n//     if (movie.watched === true) {\n//       moviesWatched.push(movie);\n//     }\n//     if (movie.queued === true) {\n//       moviesQueued.push(movie);\n//     }\n//   });\n//   watchedList = moviesWatched;\n//   queueList = moviesQueued;\n// }\n//---------------------------------------------------\n\nfunction watchedBtnClick2() {\n  // debugger;\n  if (m.watched) {\n    m.watched = false;\n    watchedBtn2.innerHTML = 'Add to watched';\n    let extractPos = watchedList.findIndex(movie => movie.id === m.id);\n    watchedList.splice(extractPos, 1);\n    // const queuedMoviesLength = queueList.length;\n    // if (queuedMoviesLength === 0) {\n    // const moviePlaced = allMovies.findIndex(movie => movie.id === m.id);\n    // allMovies[moviePlaced].watched = false;\n    // } else {\n    //   const moviePlaced = queueList.findIndex(movie => movie.id === m.id);\n    //   queueList[moviePlaced].watched = false;\n    // }\n  } else {\n    watchedBtn2.innerHTML = 'Remove from watched';\n    m.watched = true;\n    // let isOnList = false;\n    // console.log('The list of movies watched is: ', watchedList);\n    // console.log('There are ', watchedList.length, ' movies wached');\n    // if (watchedList.length !== 0) {\n    //   watchedList.forEach(movie => {\n    //     console.log(movie.id);\n    //     console.log(m.id);\n    //     if (m.id === movie.id) {\n    //       movie.watched = true;\n    //       isOnList = true;\n    //       watchedBtn2.innerHTML = 'Remove from watched';\n    //     }\n    //   });\n    // }\n    // if (isOnList === false) {\n    watchedList.push(m);\n    //   watchedBtn2.innerHTML = 'Remove from watched';\n    // }\n  }\n\n  // saveMovieList(WATCHED_KEY, watchedList);\n  // upload the list of watched movies to the firestore database\n  uploadWatchedQueuedMoviesToDB(watchedList, queueList);\n  //------------------------------------------------------\n  // sortMovies(watchedList);\n  // sortMovies(queueList);\n  if (watchedActive) {\n    renderMoviesList(watchedList);\n  } else {\n    renderMoviesList(queueList);\n  }\n}\nfunction queueBtnClick2() {\n  if (m.queued) {\n    m.queued = false;\n    queueBtn2.innerHTML = 'Add to queue';\n    let extractPos = queueList.findIndex(movie => movie.id === m.id);\n    queueList.splice(extractPos, 1);\n    // const queuedMoviesLength = queueList.length;\n    // if (queuedMoviesLength === 0) {\n    // const moviePlaced = allMovies.findIndex(movie => movie.id === m.id);\n    // allMovies[moviePlaced].queued = false;\n    // } else {\n    //   const moviePlaced = queueList.findIndex(movie => movie.id === m.id);\n    //   queueList[moviePlaced].queued = false;\n    // }\n  } else {\n    queueBtn2.innerHTML = 'Remove from queue';\n    m.queued = true;\n    // let isOnList = false;\n    // console.log('The list of movies queued is: ', queueList);\n    // console.log('There are ', queueList.length, ' movies in the queue');\n    // if (queueList.length !== 0) {\n    //   queueList.forEach(movie => {\n    //     console.log(movie.id);\n    //     console.log(m.id);\n    //     if (m.id === movie.id) {\n    //       movie.queued = true;\n    //       isOnList = true;\n    //       queueBtn2.innerHTML = 'Remove from queue';\n    //     }\n    //   });\n    // }\n    // if (isOnList === false) {\n    queueList.push(m);\n    //   queueBtn2.innerHTML = 'Remove from queue';\n    // }\n  }\n  // saveMovieList(QUEUE_KEY, queueList);\n  //upload the list of queued movies to the firestore database\n  uploadWatchedQueuedMoviesToDB(watchedList, queueList);\n  //----------------------------------------------------\n  // sortMovies(watchedList);\n  // sortMovies(queuedList);\n  if (watchedActive) {\n    renderMoviesList(watchedList);\n  } else {\n    renderMoviesList(queueList);\n  }\n}\n// end of modal section\nconst btnsDivElem2 = document.querySelector('.movdiv2');\nbtnsDivElem2.addEventListener('click', showModal2);\n\nfunction showModal2(event) {\n  if (event.target.nodeName !== 'IMG') return;\n  // look for the list in which watched or queued is false and I make it true if the movie is in both lists\n  // watchedList.forEach(movieWatched => {\n  //   queueList.forEach(movieQueued => {\n  //     if (movieWatched.id === movieQueued.id) {\n  //       if (movieWatched.queued === true && movieWatched.watched === true) {\n  //         let moviePlaced = queueList.findIndex(\n  //           movie => movie.id === movieWatched.id\n  //         );\n  //         if (queueList[moviePlaced].watched) {\n  //           queueList[moviePlaced].queued = true;\n  //         } else {\n  //           queueList[moviePlaced].watched = true;\n  //         }\n  //       }\n  //       if (movieQueued.queued === true && movieQueued.watched === true) {\n  //         let moviePlaced = watchedList.findIndex(\n  //           movie => movie.id === movieQueued.id\n  //         );\n  //         if (watchedList[moviePlaced].watched) {\n  //           watchedList[moviePlaced].queued = true;\n  //         } else {\n  //           watchedList[moviePlaced].watched = true;\n  //         }\n  //       }\n  //     }\n  //   });\n  // });\n  //----------------------------------------------------------------------\n  if (watchedActive) {\n    movArray = watchedList;\n    // const imgId = event.target.attributes[0].value;\n    // var pos = watchedList.findIndex(movie => imgId - movie.id === 0);\n    // // fill modal content with movie data\n    // const titleElem = document.querySelector('.title-film');\n    // const imgElem = document.querySelector('.movie-poster');\n    // const voteElem = document.querySelector('.vote');\n    // const votesElem = document.querySelector('.votes');\n    // const popularityElem = document.querySelector('.popularity');\n    // const origTitleElem = document.querySelector('.title');\n    // const genresElem = document.querySelector('.genres');\n    // const overviewElem = document.querySelector('.description-text');\n\n    // m = movArray[pos];\n    // titleElem.innerHTML = m.title;\n    // imgElem.src = m.poster_path;\n    // voteElem.innerHTML = m.vote_average;\n    // votesElem.innerHTML = ' / ' + m.vote_count;\n    // popularityElem.innerHTML = m.popularity;\n    // origTitleElem.innerHTML = m.original_title;\n    // genresElem.innerHTML = m.genres;\n    // overviewElem.innerHTML = m.overview;\n\n    // watchedBtn2.innerHTML = 'Add to watched';\n  } else {\n    movArray = queueList;\n    // const imgId = event.target.attributes[0].value;\n    // var pos = queueList.findIndex(movie => imgId - movie.id === 0);\n    // // fill modal content with movie data\n    // const titleElem = document.querySelector('.title-film');\n    // const imgElem = document.querySelector('.movie-poster');\n    // const voteElem = document.querySelector('.vote');\n    // const votesElem = document.querySelector('.votes');\n    // const popularityElem = document.querySelector('.popularity');\n    // const origTitleElem = document.querySelector('.title');\n    // const genresElem = document.querySelector('.genres');\n    // const overviewElem = document.querySelector('.description-text');\n\n    // m = movArray[pos];\n    // titleElem.innerHTML = m.title;\n    // imgElem.src = m.poster_path;\n    // voteElem.innerHTML = m.vote_average;\n    // votesElem.innerHTML = ' / ' + m.vote_count;\n    // popularityElem.innerHTML = m.popularity;\n    // origTitleElem.innerHTML = m.original_title;\n    // genresElem.innerHTML = m.genres;\n    // overviewElem.innerHTML = m.overview;\n  }\n  const imgId = event.target.attributes[0].value;\n  var pos = movArray.findIndex(movie => imgId - movie.id === 0);\n  // fill modal content with movie data\n  const titleElem = document.querySelector('.title-film');\n  const imgElem = document.querySelector('.movie-poster');\n  const voteElem = document.querySelector('.vote');\n  const votesElem = document.querySelector('.votes');\n  const popularityElem = document.querySelector('.popularity');\n  const origTitleElem = document.querySelector('.title');\n  const genresElem = document.querySelector('.genres');\n  const overviewElem = document.querySelector('.description-text');\n\n  m = movArray[pos];\n  titleElem.innerHTML = m.title;\n  imgElem.src = m.poster_path;\n  voteElem.innerHTML = m.vote_average;\n  votesElem.innerHTML = ' / ' + m.vote_count;\n  popularityElem.innerHTML = m.popularity;\n  origTitleElem.innerHTML = m.original_title;\n  genresElem.innerHTML = m.genres;\n  overviewElem.innerHTML = m.overview;\n\n  // queueBtn2.innerHTML = 'Add to queue';\n  if (m.watched) {\n    watchedBtn2.innerHTML = 'Remove from watched';\n  } else {\n    watchedBtn2.innerHTML = 'Add to watched';\n  }\n  if (m.queued) {\n    queueBtn2.innerHTML = 'Remove from queue';\n  } else {\n    queueBtn2.innerHTML = 'Add to queue';\n  }\n\n  // show modal window\n  backdrop2.style.display = 'block';\n}\n"],"names":["$1dkLo","parcelRequire","$558e902e6a5173f7$var$m","$558e902e6a5173f7$var$watchedList","$558e902e6a5173f7$var$queueList","$558e902e6a5173f7$var$movArray","$558e902e6a5173f7$var$watchedActive","$558e902e6a5173f7$var$initializeLibrary","$558e902e6a5173f7$var$setActiveStyles","$558e902e6a5173f7$var$watchedBtn","clearBtn","document","querySelector","innerText","length","renderMoviesList","addEventListener","$558e902e6a5173f7$var$clearBtnClick","console","log","$jPzW1","uploadWatchedQueuedMoviesToDB","innerHTML","element","classList","add","$558e902e6a5173f7$var$removeActiveStyles","remove","async","downloadWatchedQueuedMoviesFromDB","Promise","resolve","setTimeout","itemData","itemAccess","data","itemDataLength","Object","keys","undefined","queuedMovies","watchedMovies","queuedMoviesLength","watchedMoviesLength","queuedListText","JSON","parse","watchedListText","error","$558e902e6a5173f7$var$takeItem","$558e902e6a5173f7$var$queueBtn","spanElem","$558e902e6a5173f7$var$closeModalButton2","getElementById","$558e902e6a5173f7$var$backdrop2","style","display","event","key","target","$558e902e6a5173f7$var$watchedBtn2","$558e902e6a5173f7$var$queueBtn2","watched","extractPos","findIndex","movie","id","splice","push","queued","nodeName","imgId","attributes","value","pos","titleElem","imgElem","voteElem","votesElem","popularityElem","origTitleElem","genresElem","overviewElem","title","src","poster_path","vote_average","vote_count","popularity","original_title","genres","overview"],"version":3,"file":"my_library.eea3e0e1.js.map"}